on:
  push:
    paths-ignore:
      - '.gitignore'
      - '**.md'
      - '**.gd'
      - '**.tscn'
      - '**.import'
      - 'live2d/**'
      - '3d/**'
      - 'scenes/**'
    
jobs:
  therac_sim:
    uses: wonky-honky/therac_sim/.github/workflows/main.yml@main
    with:
      therac_sim_subdirectory: ext/therac_sim
  gd_cubism:
    uses: pillowtrucker/gd_cubism/.github/workflows/bazinga.yml@mine
    with:
      subdirectory: ext/gd_cubism
  tooting:
    uses: wonky-honky/tooting/.github/workflows/main.yml@master
    with:
      subdirectory: ext/tooting
  bundle:
    needs: [therac_sim,gd_cubism,tooting]
    name: bundle up game on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
    steps:
      - name: Install apt Dependencies (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y ccache ninja-build git libasound2-dev librtmidi-dev libsndfile1-dev zlib1g-dev libfmt-dev libsdl2-dev
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          lfs: true
      - name: Clean up dev environment 1/?
        run: |
          unlink addons/gd_cubism
          unlink addons/therac_sim
          unlink addons/tooting
      - name: Clean up dev environment 2/? Linux
        if: ${{matrix.os == 'ubuntu-latest' }}
        run: |
          rm -rf .git
          rm -rf .github
          rm -rf ext/gd_cubism
          rm -rf ext/tooting
          rm -rf ext/therac_sim
      - name: Clean up dev environment 2/? Windows
        if: ${{matrix.os == 'windows-latest' }}
        run: |
          Remove-Item -Recurse -Force .git
          Remove-Item -Recurse -Force .github
          Remove-Item -Recurse -Force ext/gd_cubism
          Remove-Item -Recurse -Force ext/tooting
          Remove-Item -Recurse -Force ext/therac_sim
      - uses: actions/download-artifact@v4
        with:
          name: tooting-Release-${{ runner.os }}
          path: addons/tooting
      - uses: actions/download-artifact@v4
        with:
          name: therac_sim-Release-${{ runner.os }}
          path: addons/therac_sim
#      - uses: actions/download-artifact@v4
#        with:
#          name: tooting-Debug-${{ runner.os }}
#          path: addons/tooting
#      - uses: actions/download-artifact@v4
#        with:
#          name: therac_sim-Debug-${{ runner.os }}
#          path: addons/therac_sim
      - uses: actions/download-artifact@v4
        with:
          name: gd_cubism-${{ runner.os }}
          path: addons/gd_cubism
      - name: hmmm
        if: ${{ matrix.os == 'ubuntu-latest' }}
        run: |
          sudo cp -f addons/tooting/usr/lib/* /usr/local/lib/
          sudo cp -f addons/therac_sim/usr/lib/* /usr/local/lib/
      - name: Download godot linux
        if: ${{ matrix.os == 'ubuntu-latest' }}
        id: download-godot-artifact-linux
        uses: dawidd6/action-download-artifact@v3
        with:
          # Optional, GitHub token, a Personal Access Token with `public_repo` scope if needed
          # Required, if the artifact is from a different repo
          # Required, if the repo is private a Personal Access Token with `repo` scope is needed or GitHub token in a job where the permissions `action` scope set to `read`
          github_token: ${{secrets.GITHUB_TOKEN}}
          # Optional, workflow file name or ID
          # If not specified, will be inferred from run_id (if run_id is specified), or will be the current workflow
          workflow: runner.yml
          # If no workflow is set and workflow_search set to true, then the most recent workflow matching
          # all other criteria will be looked up instead of using the current workflow
          workflow_search: false
          # Optional, the status or conclusion of a completed workflow to search for
          # Can be one of a workflow conclusion:
          #   "failure", "success", "neutral", "cancelled", "skipped", "timed_out", "action_required"
          # Or a workflow status:
          #   "completed", "in_progress", "queued"
          # Use the empty string ("") to ignore status or conclusion in the search
          workflow_conclusion: success
          # Optional, will get head commit SHA
#          pr: ${{github.event.pull_request.number}}
          # Optional, no need to specify if PR is
#          commit: ${{github.event.pull_request.head.sha}}
          # Optional, will use the specified branch. Defaults to all branches
          branch: enable-collision-handling-with-mouse-captured-build-editor-no-mono
          # Optional, defaults to all types
#          event: push
          # Optional, will use specified workflow run
          # use ${{ github.event.workflow_run.id }} when your action runs in a workflow_run event
          # and wants to download from the triggering workflow run
#          run_id: 1122334455
          # Optional, run number from the workflow
#          run_number: 34
          # Optional, uploaded artifact name,
          # will download all artifacts if not specified
          # and extract them into respective subdirectories
          # https://github.com/actions/download-artifact#download-all-artifacts
          # is treated as a regular expression if input name_is_regexp is true
          # will download only those artifacts with a name that matches this regular expression
          # https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_expressions
          name: linux-editor-llvm
          # Optional, name is treated as a regular expression if set true
#          name_is_regexp: true
          # Optional, a directory where to extract artifact(s), defaults to the current directory
          path: godot-bin
          # Optional, defaults to current repo
          repo: pillowtrucker/godot
          # Optional, check the workflow run to whether it has an artifact
          # then will get the last available artifact from the previous workflow
          # default false, just try to download from the last one
          check_artifacts: true
          # Optional, search for the last workflow run whose stored an artifact named as in `name` input
          # default false
          search_artifacts: true
          # Optional, choose to skip unpacking the downloaded artifact(s)
          # default false
          skip_unpack: false
          # Optional, choose how to exit the action if no artifact is found
          # can be one of:
          #  "fail", "warn", "ignore"
          # default fail
          if_no_artifact_found: fail
          # Optional, ignore forks when searching for artifacts
          # default true
          allow_forks: false
      - name: Download godot windows
        if: ${{ matrix.os == 'windows-latest' }}
        id: download-godot-artifact-windows
        uses: dawidd6/action-download-artifact@v3
        with:
          # Optional, GitHub token, a Personal Access Token with `public_repo` scope if needed
          # Required, if the artifact is from a different repo
          # Required, if the repo is private a Personal Access Token with `repo` scope is needed or GitHub token in a job where the permissions `action` scope set to `read`
          github_token: ${{secrets.GITHUB_TOKEN}}
          # Optional, workflow file name or ID
          # If not specified, will be inferred from run_id (if run_id is specified), or will be the current workflow
          workflow: runner.yml
          # If no workflow is set and workflow_search set to true, then the most recent workflow matching
          # all other criteria will be looked up instead of using the current workflow
          workflow_search: false
          # Optional, the status or conclusion of a completed workflow to search for
          # Can be one of a workflow conclusion:
          #   "failure", "success", "neutral", "cancelled", "skipped", "timed_out", "action_required"
          # Or a workflow status:
          #   "completed", "in_progress", "queued"
          # Use the empty string ("") to ignore status or conclusion in the search
          workflow_conclusion: success
          # Optional, will get head commit SHA
#          pr: ${{github.event.pull_request.number}}
          # Optional, no need to specify if PR is
#          commit: ${{github.event.pull_request.head.sha}}
          # Optional, will use the specified branch. Defaults to all branches
          branch: enable-collision-handling-with-mouse-captured-build-editor-no-mono
          # Optional, defaults to all types
#          event: push
          # Optional, will use specified workflow run
          # use ${{ github.event.workflow_run.id }} when your action runs in a workflow_run event
          # and wants to download from the triggering workflow run
#          run_id: 1122334455
          # Optional, run number from the workflow
#          run_number: 34
          # Optional, uploaded artifact name,
          # will download all artifacts if not specified
          # and extract them into respective subdirectories
          # https://github.com/actions/download-artifact#download-all-artifacts
          # is treated as a regular expression if input name_is_regexp is true
          # will download only those artifacts with a name that matches this regular expression
          # https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_expressions
          name: windows-editor
          # Optional, name is treated as a regular expression if set true
#          name_is_regexp: true
          # Optional, a directory where to extract artifact(s), defaults to the current directory
          path: godot-bin
          # Optional, defaults to current repo
          repo: pillowtrucker/godot
          # Optional, check the workflow run to whether it has an artifact
          # then will get the last available artifact from the previous workflow
          # default false, just try to download from the last one
          check_artifacts: true
          # Optional, search for the last workflow run whose stored an artifact named as in `name` input
          # default false
          search_artifacts: true
          # Optional, choose to skip unpacking the downloaded artifact(s)
          # default false
          skip_unpack: false
          # Optional, choose how to exit the action if no artifact is found
          # can be one of:
          #  "fail", "warn", "ignore"
          # default fail
          if_no_artifact_found: fail
          # Optional, ignore forks when searching for artifacts
          # default true
          allow_forks: false
#      - name: Pack game data Linux
#        if: ${{ matrix.os == 'ubuntu-latest' }}
#        run: |
#          chmod a+x ./godot-bin -R
#          ./godot-bin/godot.linuxbsd.editor.x86_64.mono --headless --verbose --export-pack Linux game_data.pck
#          ls -lFh
#      - name: Pack game data Windows
#        if: ${{ matrix.os == 'windows-latest' }}
#        run: |
#          ./godot-bin/godot.windows.editor.x86_64.exe --verbose --headless --export-pack Windows game_data.pck
#      - name: Start preparing final directory
#        run: |
#          mkdir ../game
#          mv game_data.pck ../game/
      - name: Prepare appimage 
        if: matrix.os == 'ubuntu-latest'
        run: |
          wget https://github.com/linuxdeploy/linuxdeploy/releases/download/1-alpha-20240109-1/linuxdeploy-static-x86_64.AppImage
          wget https://github.com/AppImage/AppImageKit/releases/download/13/AppRun-x86_64 -O AppRun
          chmod a+x godot-bin -R
          chmod a+x ./linuxdeploy-static-x86_64.AppImage
          chmod a+x ./AppRun
#          ./linuxdeploy-static-x86_64.AppImage --appdir ../game
#      - name: Deploy executable windows
#        if: ${{ matrix.os == 'windows-latest' }}
#        run: |
#          Copy-Item -Path "godot-bin/*" -Destination "..\game" -Recurse -Force
#          mkdir ../game/addons
#          Copy-Item -Path "addons/tooting" -Destination "D:\a\test_project\game\addons" -Recurse -Force
#          Copy-Item -Path "addons/therac_sim" -Destination "D:\a\test_project\game\addons" -Recurse -Force
#          Copy-Item -Path "addons/gd_cubism" -Destination "D:\a\test_project\game\addons" -Recurse -Force
#          tree D:/a/test_project/game /F
#      - name: Finish appimage
#        if: matrix.os == 'ubuntu-latest'
#        run: |
#          cp -rf addons/tooting/usr/lib/* ../game/usr/lib/
#          cp -rf addons/therac_sim/usr/lib/* ../game/usr/lib/
#          mv ../game/game_data.pck ../game/usr/bin/
#          cp -rf godot-bin/* ../game/usr/bin/
#          cp TheracGame.desktop ../game/
#          cp myapp.png ../game/
#          ./linuxdeploy-static-x86_64.AppImage --appdir ../game -e ../game/usr/bin/godot.linuxbsd.editor.x86_64.mono --output appimage
#      - name: Upload linux artefact
#        if: matrix.os == 'ubuntu-latest'
#        uses: actions/upload-artifact@v4
#        with:
#          name: game-linux-appimage
#          path: TheracGame-x86_64.AppImage
#      - name: Upload windows artefact
#        if: matrix.os == 'windows-latest'
#        uses: actions/upload-artifact@v4
#        with:
#          name: game-windows
#          path: D:/a/test_project/game/**
      - name: Clean up on windows before uploading unpacked
        if: matrix.os == 'windows-latest'
        run: |
          unlink addons/zylann.hterrain
          Copy-Item -Path "ext/godot_heightmap_plugin/addons/zylann.hterrain" -Destination "addons/" -Recurse -Force
          Remove-Item -Recurse -Force ext/godot_heightmap_plugin
      - name: Upload windows unpacked
        if: matrix.os == 'windows-latest'
        # this needs to be v3 because the newer action trips over its own dick with nofile and it's hard to fix this on windows
        uses: actions/upload-artifact@v3
        with:
          name: game-windows-unpacked
          path: ${{ github.workspace }}
#      - name: Remove appimage before packing raw data
#        if: matrix.os == 'ubuntu-latest'
#        run: rm -f TheracGame-x86_64.AppImage
      - name: make appimage with unpacked data
        if: matrix.os == 'ubuntu-latest'
        run: |
          mkdir ../other
          mkdir -p ./usr/bin
          mv ./linuxdeploy-static-x86_64.AppImage ../
          mkdir -p ./usr/lib
          mv addons/tooting/usr/lib/* ./usr/lib/
          mv addons/tooting/tooting/lib/Linux-x86_64/libfurnace.so ./usr/lib/
          mv addons/therac_sim/usr/lib/* ./usr/lib/
          mv addons/therac_sim/therac_sim/lib/Linux-x86_64/libHShstherac25-0.1.0.0-inplace-ghc9.8.2.so ./usr/lib/
          mv godot-bin/* ./usr/bin/
          mv run_project_in_appimage.sh ./usr/bin/
          mv usr ../other/
          mv TheracGame.desktop ../other/
          mv myapp.png ../other/
          mv AppRun ../other/
          mv ./* ../other/usr/bin/
          ../linuxdeploy-static-x86_64.AppImage --appdir ${{ github.workspace }}/other
          ../linuxdeploy-static-x86_64.AppImage --appdir ../other -e ../other/usr/bin/godot.linuxbsd.editor.x86_64.llvm --output appimage
      - name: Upload linux unpacked appimage
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v4
        with:
          name: game-linux-unpacked
          path: TheracGame-x86_64.AppImage
